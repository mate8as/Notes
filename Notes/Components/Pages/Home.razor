@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject DarkModeSwitchStateContainer DarkModeSwitchStateContainer

@page "/"


<div id="DivTemp">
    <h3>Collaborative Note</h3>

    <RichTextEditor isDarkModeOn="DarkModeSwitchStateContainer.GetDarkMode()" Content="@Content" ContentChanged="OnContentChanged"></RichTextEditor>

    @foreach (KeyValuePair<string, (int cursorX, int cursorY)> cursor in OtherUserCursors)
    {
        <MudAvatar Color="Color.Primary" Style="@($"position: absolute; top: {cursor.Value.cursorY}px; left: {cursor.Value.cursorX}px;")">M</MudAvatar>
    }
</div>



@code {
    [Inject] IJSRuntime JS { get; set; }
    [Parameter] public string NoteId { get; set; } = "1";

    private HubConnection hubConnection;
    private string Content = string.Empty;
    private string userId = Guid.NewGuid().ToString();
    private Dictionary<string, (int cursorX, int cursorY)> OtherUserCursors = new();

    protected override async Task OnInitializedAsync()
    {
       
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var lDotNetReference = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setDotnetReference", lDotNetReference);




            hubConnection = new HubConnectionBuilder().WithUrl(Navigation.ToAbsoluteUri("/noteshub")).WithAutomaticReconnect().Build();


            hubConnection.On<string, string>("ReceiveContentUpdate", async (newContent, senderId) =>
            {
                if (senderId == userId)
                    return;

                Content = newContent;
                await InvokeAsync(StateHasChanged);
            });

            hubConnection.On<string, int, int>("ReceiveCursorUpdate", async (otherUserId, positionX, positionY) =>
            {
                OtherUserCursors[otherUserId] = (positionX, positionY);
                await InvokeAsync(StateHasChanged);
            });


            await hubConnection.StartAsync();
            await hubConnection.SendAsync("JoinNote", NoteId);

            DarkModeSwitchStateContainer.OnDarkModeChanged += async () => await InvokeAsync(StateHasChanged);
        }

        base.OnAfterRender(firstRender);
    }

    private async Task OnContentChanged(string content)
    {
        Content = content;
        await hubConnection.SendAsync("UpdateContent", NoteId, content, userId);
    }

    [JSInvokable]
    public async Task OnCursorMoved(int cursorX, int sursorY)
    {
        await hubConnection.SendAsync("UpdateCursor", NoteId, userId, cursorX, sursorY);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("LeaveNote", NoteId);
            await hubConnection.DisposeAsync();
        }
    }

}
@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation

<h3>Collaborative Note</h3>

<div id="DivTemp" style="width: 100vw; height: 100vh;">
    @* @onmouseup="OnCursorMoved" @onkeyup="OnCursorMoved" *@
    <textarea @oninput="OnContentChanged" style="width: 600px; height: 400px;">@content</textarea>


    @foreach (KeyValuePair<string, (int cursorX, int cursorY)> cursor in OtherUserCursors)
    {
        <MudAvatar Color="Color.Primary" Style="@($"position: absolute; top: {cursor.Value.cursorY}px; left: {cursor.Value.cursorX}px;")">M</MudAvatar>
    }
</div>



@code {
    [Inject] IJSRuntime JS { get; set; }
    [Parameter] public string NoteId { get; set; } = "1";

    private HubConnection hubConnection;
    private string content = string.Empty;
    private string userId = Guid.NewGuid().ToString();
    private Dictionary<string, (int cursorX, int cursorY)> OtherUserCursors = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(Navigation.ToAbsoluteUri("/noteshub")).WithAutomaticReconnect().Build();

        hubConnection.On<string>("ReceiveContentUpdate", async (newContent) =>
        {
            content = newContent;
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, int, int>("ReceiveCursorUpdate", async (otherUserId, positionX, positionY) =>
        {
            OtherUserCursors[otherUserId] = (positionX, positionY);
            await InvokeAsync(StateHasChanged);
        });


        await hubConnection.StartAsync();
        await hubConnection.SendAsync("JoinNote", NoteId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var lDotNetReference = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("setDotnetReference", lDotNetReference);

        }

        base.OnAfterRender(firstRender);
    }

    private async Task OnContentChanged(ChangeEventArgs e)
    {
        content = e.Value?.ToString() ?? "";
        await hubConnection.SendAsync("UpdateContent", NoteId, content);
    }

    [JSInvokable]
    public async Task OnCursorMoved(int cursorX, int sursorY)
    {
        await hubConnection.SendAsync("UpdateCursor", NoteId, userId, cursorX, sursorY);

        // var cursorPosition = await JS.InvokeAsync<Dictionary<string, int>>("cursorHelper.getCursorPosition", "event");

        // if (cursorPosition != null && cursorPosition.ContainsKey("x") && cursorPosition.ContainsKey("y"))
        // {

        // }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("LeaveNote", NoteId);
            await hubConnection.DisposeAsync();
        }
    }

}
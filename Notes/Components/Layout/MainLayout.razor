@inherits LayoutComponentBase
@inject DarkModeSwitchStateContainer DarkModeSwitchStateContainer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkModeVal" Theme="@costumTheme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />


<MudLayout>
    <MudMainContent Class="pt-0" Style="min-height: calc(100vh - 80px);">
        <MudDrawerContainer Class="mud-height-full">
            <MudDrawer Class="mud-drawer-fixed" @bind-Open="_drawerOpen" Fixed="true" Elevation="3" Variant="@DrawerVariant.Mini" OpenMiniOnHover="true">
                <MudStack Class="pa-3" Style="height: 100%;">
                    <MudStack Row>
                        <MudText Typo="Typo.h3" Style="@($"color: {(_isDarkModeVal ? Colors.Shades.White : Colors.Shades.Black)}; font-weight: 500;")" Class="ms-5">Notes</MudText>

                        <DarkModeSwitch _isDarkModeValChanged="HandleDarkModeChange"></DarkModeSwitch>
                    </MudStack>

                    <MudStack Class="mt-auto">
                        <MudMenu StartIcon="@Icons.Material.Filled.Person" Label="Profile" EndIcon="@Icons.Material.Filled.ArrowDropDown" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.BottomLeft">
                            @if (user.Identity?.IsAuthenticated ?? false)
                            {
                                <MudMenuItem Icon="@Icons.Material.Filled.Logout" Label="Logout" Href="logout" />
                            }
                            else
                            {
                                <MudMenuItem Icon="@Icons.Material.Filled.PersonAdd" Label="Register" Href="register" />
                                <MudMenuItem Icon="@Icons.Material.Filled.Login" Label="Login" Href="login" />
                            }
                        </MudMenu>
                    </MudStack>

                </MudStack>
            </MudDrawer>

            <div class="d-flex justify-center align-center mud-height-full">
                <ErrorBoundary @ref="errorBoundary" Context="exception">
                    <ChildContent>
                        <MudContainer Fixed>
                            @Body
                        </MudContainer>
                    </ChildContent>

                    <ErrorContent>
                        <MudContainer Style="overflow-y: auto;">
                            <MudPaper Class="bordered-paper-gp" Elevation="0" Width="100%">
                                <MudStack Spacing="5">
                                    <MudStack Row Spacing="0" AlignItems="AlignItems.Center">
                                        <MudText Typo="Typo.h2" Class="text-gold-glow" Style="margin: auto;">Error</MudText>
                                    </MudStack>

                                    <MudIcon Icon="@Icons.Material.Filled.ErrorOutline" Style="font-size: 8rem; align-self: center;"></MudIcon>

                                    <MudStack Spacing="3" Class="d-flex text-wrap">
                                        <MudText Typo="Typo.body1" Style="color: var(--light-purple);"><span class="text-basic-purple">Error type:</span> @exception.GetType()</MudText>
                                        <MudText Typo="Typo.body1" Style="color: var(--light-purple);"><span class="text-basic-purple">Error message:</span>  @exception.Message</MudText>

                                        <MudButton Class="mud-button-costum mud-button-lg" OnClick="() => errorBoundary.Recover()" StartIcon="@Icons.Material.Filled.Refresh" Style="align-self: center;"> Reload</MudButton>

                                        @if (exception.InnerException != null)
                                        {
                                            <MudStack Spacing="1">
                                                <MudText Typo="Typo.body1" Style="color: var(--basic-purple);">Error Inner Exception:</MudText>
                                                <MudText Typo="Typo.body1" Style="color: var(--light-purple);word-break: break-all;">@exception.InnerException</MudText>
                                            </MudStack>

                                        }
                                    </MudStack>
                                </MudStack>
                            </MudPaper>
                        </MudContainer>
                    </ErrorContent>
                </ErrorBoundary>

                <Footer></Footer>
            </div>
        </MudDrawerContainer>
    </MudMainContent>


</MudLayout>

@code {
    private ErrorBoundary errorBoundary;

    public bool _isDarkModeVal { get; set; }
    private bool _drawerOpen = true;

    ClaimsPrincipal user = new ClaimsPrincipal();
    private HubConnection hubConnection;

    private MudThemeProvider _mudThemeProvider;

    MudTheme costumTheme = new MudTheme()
        {
            LayoutProperties = new LayoutProperties()
            {
                AppbarHeight = "80px"
            },
            PaletteLight = new PaletteLight()
            {
                Primary = Colors.Amber.Darken2,
                Secondary = Colors.Gray.Darken1,
                AppbarBackground = Colors.Shades.White,
                LinesDefault = Colors.Amber.Darken2
            },
            PaletteDark = new PaletteDark()
            {
                Primary = Colors.Amber.Lighten1,
                Secondary = Colors.Gray.Lighten1,
                AppbarBackground = Colors.BlueGray.Darken4,
                LinesDefault = Colors.Amber.Lighten1,
            }
        };


    protected override void OnInitialized()
    {
        errorBoundary = new ErrorBoundary();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleDarkModeChange(await _mudThemeProvider.GetSystemPreference());
            await LoadUserCredentials();

            string? drawerState = await LocalStorage.GetItemAsStringAsync("DrawerState");

            if (!string.IsNullOrEmpty(drawerState) && bool.TryParse(drawerState, out bool openValue))
            {
                _drawerOpen = openValue;
                StateHasChanged();
            }
        }
    }

    private async Task LoadUserCredentials()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
    }

    private async Task HandleDarkModeChange(bool IsDarkModeOn)
    {
        _isDarkModeVal = IsDarkModeOn;

        await DarkModeSwitchStateContainer.SetDarkMode(IsDarkModeOn);
        StateHasChanged();
    }

    private async Task DrawerStateSave()
    {
        await LocalStorage.SetItemAsStringAsync("DrawerState", _drawerOpen.ToString());
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DarkModeSwitchStateContainer DarkModeSwitchStateContainer
@inject UserManager<User> UserManager
@inject ISnackbar Snackbar

@page "/"
@page "/home"


<MudStack Spacing="10">
    <MudGrid Spacing="0">
        <MudItem xs="8" sm="6" md="5" lg="4" xl="3" xxl="2">
            <MudTextField T="string" Typo="Typo.h4" Class="mt-5 ms-3" Variant="Variant.Text" Required="true" RequiredError="Email is required!" @bind-Value="NoteTitle" />
        </MudItem>
    </MudGrid>


    <RichTextEditor isDarkModeOn="DarkModeSwitchStateContainer.GetDarkMode()" Content="@Note.RawContent" ContentChanged="OnContentChanged"></RichTextEditor>

   <CursorTracker NoteId="@NoteId" userId="@userId"></CursorTracker>
</MudStack>



@code {
    [Inject] IJSRuntime JS { get; set; }

    [Parameter]
    public string NoteId { get; set; } = "1";

    private HubConnection hubConnection;

    private NoteFile Note = new NoteFile();
    private string NoteTitle = "Untitled note";


    private string userId = Guid.NewGuid().ToString();
    private User? currentUser = null;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            string? email = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;

            if (email == null) { Snackbar.Add("The user can't be received, since the email is null. Try to login again!", Severity.Error); return; }
            currentUser = await UserManager.FindByEmailAsync(email);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hubConnection = new HubConnectionBuilder().WithUrl(Navigation.ToAbsoluteUri("/noteshub")).WithAutomaticReconnect().Build();

            hubConnection.On<string, string>("ReceiveContentUpdate", async (newContent, senderId) =>
            {
                if (senderId == userId)
                    return;

                Note.RawContent = newContent;
                await InvokeAsync(StateHasChanged);
            });


            await hubConnection.StartAsync();
            await hubConnection.SendAsync("JoinNote", NoteId);

            DarkModeSwitchStateContainer.OnDarkModeChanged += async () => await InvokeAsync(StateHasChanged);
        }


        AuthNotificationHandler();
        base.OnAfterRender(firstRender);
    }

    private void AuthNotificationHandler()
    {
        if (currentUser != null && currentUser.UserName != null && BlazorCookieLoginMiddleware.PendingNotifications.TryGetValue(currentUser.UserName, out var notification))
        {
            Snackbar.Add($"{notification.Event}", notification.Severity);
            BlazorCookieLoginMiddleware.PendingNotifications.Remove(currentUser.UserName);
        }
    }

    private async Task OnContentChanged(string content)
    {
        Note.RawContent = content;
        await hubConnection.SendAsync("UpdateContent", NoteId, content, userId);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("LeaveNote", NoteId);
            await hubConnection.DisposeAsync();
        }
    }

}